image: node:18-alpine

stages:
  - build
  - push
  - deploy

before_script:
  - apk add --no-cache python3 py3-pip
  - apk add --no-cache docker
  - python3 -m venv /tmp/awscli-venv
  - source /tmp/awscli-venv/bin/activate
  - pip install awscli
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

build:
  stage: build
  script:
    - yarn install
    - CI=false yarn build
  artifacts:
    paths:
      - build/

push:
  stage: push
  dependencies:
    - build
  image: docker:latest
  services:
    - docker:dind
  script:
    # Login to ECR using AWS CLI
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/c4e8f2q9

    # Build and push Docker image
    - echo -e "FROM nginx:alpine\nCOPY build/ /usr/share/nginx/html" > Dockerfile
    - echo -e "server {\n\tlisten 80;\n\tlocation / {\n\t\troot /usr/share/nginx/html;\n\t\tindex index.html index.htm;\n\t\ttry_files \$uri \$uri/ /index.html;\n\t}\n\terror_page 404 =200 /index.html;\n}" > default.conf
    - echo -e "COPY default.conf /etc/nginx/conf.d/default.conf" >> Dockerfile
    - docker build -t fa-mock:$CI_COMMIT_SHA .
    - docker tag fa-mock:$CI_COMMIT_SHA public.ecr.aws/c4e8f2q9/fa-mock:$CI_COMMIT_SHA
    - docker push public.ecr.aws/c4e8f2q9/fa-mock:$CI_COMMIT_SHA

deploy:
  stage: deploy
  script:
    - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_TASK_DEFINITION_ARN --desired-count 1 --force-new-deployment
  only:
    - dev-final
